trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
# TODO: Move Build and Tests to separate ymll files
stages:
  - stage: Build_and_Test
    displayName: 'Build_and_Tests'
    jobs:
      - job: Build_and_Test_Job
        displayName: 'Build and run Unit Tests'
        steps:
        - task: UseDotNet@2
          displayName: 'Install .NET SDK'
          inputs:
            packageType: 'sdk'
            version: '8.x'

        - task: NuGetToolInstaller@1
          displayName: 'Install NuGet'

        - script: |
            echo "Listing environment variables:"
            printenv
          displayName: "Print Environment Variables (Bash)"

        - powershell: Get-ChildItem -Path $(Build.SourcesDirectory) -Recurse
          displayName: 'List repository files'

        - powershell: |
            (Get-Content -Path configs/nuget.azure.config) -replace '\$\((GITHUB_USER_NAME)\)', $env:GITHUB_USER_NAME `
              -replace '\$\((GITHUB_READ_PACKAGE_TOKEN)\)', $env:GITHUB_READ_PACKAGE_TOKEN | `
              Set-Content -Path configs/nuget.azure.config
          displayName: 'Replace tokens in nuget.azure.config'

        - powershell: |
            Write-Host "File path: $(Build.SourcesDirectory)\configs\nuget.azure.config"
            Write-Host "File content:"
            Get-Content "$(Build.SourcesDirectory)\configs\nuget.azure.config"
          displayName: "Show nuget.azure.config file content"

        - task: NuGetCommand@2
          displayName: 'Restore NuGet Packages'
          inputs:
            command: 'restore'
            restoreSolution: '**/*.sln'
            nugetConfigPath: '$(Build.SourcesDirectory)/configs/nuget.azure.config'

        - task: VSBuild@1
          displayName: 'Build Solution'
          inputs:
            solution: '**/*.sln'
            platform: 'Any CPU'
            configuration: '$(buildConfiguration)'

        - task: VSTest@3
          displayName: 'Run Unit Tests'
          inputs:           
            testSelector: 'testAssemblies'
            testAssemblyVer2: |
              **\*UnitTests*.dll
              !**\*TestAdapter.dll
              !**\obj\**            
            codeCoverageEnabled: true
            searchFolder: '$(System.DefaultWorkingDirectory)'

        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          inputs:
            testResultsFiles: '**/TestResults/*.trx'
            testRunTitle: 'VSTest Results'

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Build Artifacts'
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)'
            artifactName: 'drop'